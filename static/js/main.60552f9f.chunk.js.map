{"version":3,"sources":["images/fireworks.gif","components/Home.js","components/Race.js","components/Ending.js","components/App.js","index.js"],"names":["module","exports","Home","history","useHistory","className","onClick","event","push","paragraphs","Race","componentDidMount","randomParagraph","Math","floor","random","length","setState","text","initialTextLength","interval","setInterval","seconds","state","componentWillUnmount","clearInterval","handleChange","userInput","target","value","compare","greenChars","redChar","inputLastChar","globalCounter","textFirstChar","newText","substring","charAt","calculatePercentage","parseInt","this","to","pathname","charactersCount","Progress","id","percent","indicating","progress","style","color","backgroundColor","Input","type","onChange","React","Component","Ending","props","location","success","console","log","calculateWPM","src","Fireworks","alt","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.60552f9f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/fireworks.2f1c35ec.gif\";","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  let history = useHistory();\r\n  const handleClick = event => {\r\n    history.push(\"/race\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <h2>Test your typing speed</h2>\r\n      <p>\r\n        This app determines your speed of typing measured in WPM (words per\r\n        minute). <br /> Inspired by <i>typeracer.com</i>\r\n      </p>\r\n      <button className=\"start-button\" onClick={handleClick}>\r\n        START THE RACE\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Input, Progress } from \"semantic-ui-react\";\r\n\r\nconst paragraphs = [\r\n  'The word \"Retro\" comes from Latin word retro, meaning backward or past times. Retro style fonts are outdated or aged style fonts that imply a vintage of at least 15 or 20 years. Texts in retro style can take you or your audience to the good old memories.'\r\n];\r\n\r\nclass Race extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      text: \"\",\r\n      initialTextLength: 0,\r\n      userInput: \"\",\r\n      greenChars: \"\",\r\n      redChar: \"\",\r\n      seconds: 0\r\n    };\r\n    // used for indexing in comparisons\r\n    this.globalCounter = 0;\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    let randomParagraph =\r\n      paragraphs[Math.floor(Math.random() * paragraphs.length)];\r\n    this.setState({\r\n      text: randomParagraph,\r\n      initialTextLength: randomParagraph.length\r\n    });\r\n    //Set timer for calculating WPM\r\n    const time = () => {\r\n      this.setState({ seconds: this.state.seconds + 1 });\r\n    };\r\n\r\n    this.interval = setInterval(time, 1000);\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    clearInterval(this.interval);\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ userInput: event.target.value });\r\n    this.compare(event.target.value, this.state.text);\r\n  };\r\n\r\n  compare = (userInput, text) => {\r\n    let { greenChars, redChar } = this.state;\r\n    let inputLastChar = userInput[this.globalCounter];\r\n    let textFirstChar = text[0];\r\n    let newText = \"\";\r\n\r\n    const approveChar = () => {\r\n      greenChars += inputLastChar;\r\n      this.globalCounter++;\r\n      newText = text.substring(1);\r\n      this.setState({\r\n        greenChars,\r\n        text: newText,\r\n        redChar: \"\"\r\n      });\r\n    };\r\n\r\n    const backtrack = () => {\r\n      this.globalCounter--;\r\n      this.setState({\r\n        greenChars: greenChars.substring(0, greenChars.length - 1),\r\n        text: greenChars.charAt(greenChars.length - 1) + text,\r\n        redChar: \"\"\r\n      });\r\n    };\r\n\r\n    if (inputLastChar === textFirstChar) {\r\n      //Entered correct character\r\n      approveChar();\r\n    } else {\r\n      //Entered incorrect character\r\n      if (\r\n        userInput[this.globalCounter - 2] ===\r\n          greenChars[this.globalCounter - 2] &&\r\n        userInput.length < greenChars.length\r\n      ) {\r\n        // User starts backspacing\r\n        backtrack();\r\n      } else {\r\n        // Highlight the incorrect character to the user\r\n        redChar = textFirstChar;\r\n        this.setState({ redChar: redChar });\r\n      }\r\n    }\r\n  };\r\n\r\n  calculatePercentage = () => {\r\n    const { initialTextLength } = this.state;\r\n    if (initialTextLength && this.globalCounter > 0) {\r\n      return parseInt((this.globalCounter / initialTextLength) * 100, 10);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.greenChars && this.state.text.length === 0) {\r\n      return (\r\n        <Redirect\r\n          to={{\r\n            pathname: \"/end\",\r\n            state: {\r\n              charactersCount: this.state.greenChars.length,\r\n              seconds: this.state.seconds\r\n            }\r\n          }}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"race-container container\">\r\n        <h2 className=\"race-heading\">Better go fast...</h2>\r\n        <Progress\r\n          id=\"progress-bar\"\r\n          percent={this.calculatePercentage()}\r\n          indicating\r\n          progress\r\n        />\r\n        <p className=\"race-text\">\r\n          <span style={{ color: \"green\" }}>{this.state.greenChars}</span>\r\n          <span style={{ backgroundColor: \"LightCoral\" }}>\r\n            {this.state.redChar}\r\n          </span>\r\n          {!this.state.redChar ? this.state.text : this.state.text.substring(1)}\r\n        </p>\r\n        <div className=\"typearea\">\r\n          <label>Type here</label>\r\n          <Input>\r\n            <input\r\n              value={this.state.userInput}\r\n              id=\"input-field\"\r\n              type=\"text\"\r\n              onChange={this.handleChange}\r\n            />\r\n          </Input>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Race;\r\n","import React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Progress } from \"semantic-ui-react\";\r\nimport Fireworks from \"../images/fireworks.gif\";\r\n\r\nconst Ending = (props) => {\r\n  let history = useHistory();\r\n  let { charactersCount, seconds } = props.location.state;\r\n\r\n  const calculateWPM = (charactersCount, seconds) => {\r\n    console.log(charactersCount, seconds);\r\n    let words = charactersCount / 5;\r\n    return parseInt(words * (60 / seconds), 10);\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    history.push(\"/race\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"ending-container container\">\r\n      <h2>Congratulations you made it</h2>\r\n      <Progress id=\"progress-bar\" percent=\"100\" progress success />\r\n      <p className=\"wpm-score\">\r\n        Your WPM: {calculateWPM(charactersCount, seconds)}\r\n      </p>\r\n      <img src={Fireworks} className=\"fireworks\" alt=\"fireworks\" />\r\n      <button className=\"try-again-button\" onClick={handleClick}>\r\n        Try Again\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Ending;\r\n","import React from \"react\";\r\nimport Home from \"./Home\";\r\nimport Race from \"./Race\";\r\nimport Ending from \"./Ending\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route path=\"/race\" component={Race} />\r\n        <Route path=\"/end\" component={Ending} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\nimport \"./index.scss\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}